name: 'Tag'
description: 'This action increments semantic versioning embedded in git tags. Optionally the action can also push the incremented tag to the repo.'
inputs:
  bump:
    description: "Part of the semantic version number to increment. (major | minor | patch)"
    required: true
    default: patch
  prefix:
    description: "Tag prefix if applicable. Common examples: 'v' | 'callPilot-' | 'portal-'"
    required: true
    default: "v"
  do_push_tag:
    description: "Signal whether the action should push the next tag to the repo."
    required: false
    default: 'false'
  token:
    description: "Privileged access token with write access to the repo."
    required: false
outputs:
  last_tag:
    description: "Previous tag with semantic version."
    value: ${{ steps.next_tag.outputs.last_tag }}
  next_tag:
    description: "Tag with next semantic version."
    value: ${{ steps.next_tag.outputs.next_tag }}
  last_semver:
    description: "Previous semantic version."
    value: ${{ steps.next_tag.outputs.last_semver}}
  next_semver:
    description: "Next semantic version."
    value: ${{ steps.next_tag.outputs.next_semver }}
runs:
  using: "composite"
  steps:
    - id: next_tag
      shell: bash
      run: |
        git fetch --tags --recurse-submodules=no
        PREFIX=${{ inputs.prefix }}
        BUMP=${{ inputs.bump }}
        if [[ "$PREFIX" ]]; then
            LAST_TAG=$(git tag --list "$PREFIX*" --sort=-v:refname | head -n 1)
            LAST_SEMVER=($(echo $LAST_TAG | tr -d $PREFIX))
        else
            LAST_TAG="$(git tag --sort=:-v:refname | head -n 1)"
            LAST_SEMVER=$LAST_TAG
        fi
        if [[ ! "$LAST_TAG" ]]; then
          echo "No tag found. Using default SEMVER '0.0.0'."
          LAST_SEMVER=0.0.0
        fi
        LAST_SEMVER_ELEMENTS=($(echo $LAST_SEMVER | tr "." " "))
        MAJOR="${LAST_SEMVER_ELEMENTS[0]}"
        MINOR="${LAST_SEMVER_ELEMENTS[1]}"
        PATCH="${LAST_SEMVER_ELEMENTS[2]}"
        case "$BUMP" in
            "major")
                ((MAJOR+=1))
                MINOR=0
                PATCH=0
            ;;
            "minor")
                ((MINOR+=1))
                PATCH=0
            ;;
            "patch")
                ((PATCH+=1))
            ;;
        esac
        NEXT_SEMVER="$MAJOR.$MINOR.$PATCH"
        NEXT_TAG="$PREFIX$NEXT_SEMVER"
        echo "BUMP:        $BUMP"
        echo "LAST SEMVER: $LAST_SEMVER"
        echo "NEXT SEMVER: $NEXT_SEMVER"
        echo "LAST TAG:    $LAST_TAG"
        echo "NEXT TAG:    $NEXT_TAG"
        echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
        echo "next_tag=$NEXT_TAG" >> $GITHUB_OUTPUT
        echo "last_semver=$LAST_SEMVER" >> $GITHUB_OUTPUT
        echo "next_semver=$NEXT_SEMVER" >> $GITHUB_OUTPUT
    
    - id: push_tag
      if: inputs.do_push_tag == 'true'
      shell: bash
      env:
        TOKEN: ${{ inputs.token }}
      run: |
        if [[ ! "$TOKEN" ]]; then
          echo "Access token is required when pushing a tag."
          exit -1
        fi
        
        URL="$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/git/refs"
        PAYLOAD="{\"ref\": \"refs/tags/${{ steps.next_tag.outputs.next_tag }}\", \"sha\": \"$GITHUB_SHA\"}"
        echo "url: $URL"
        echo "payload: $PAYLOAD"
        
        RESPONSE=$(curl -s $URL -H "Authorization: token ${{ inputs.token }}" -d "$PAYLOAD")
        LAST_STATUS=$?
        echo $RESPONSE
        exit $LAST_STATUS
        
